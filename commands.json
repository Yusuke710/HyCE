{
    "id": "This command displays the user's ID, primary group ID, and any groups they belong to.",
    "groups": "This command lists all groups that the current user is part of.",
    "pwd": "This command displays the current working directory.",
    "quota": "This command displays the current quota for the user.",
    "history": "This command lists previously used commands in the current shell session. It is useful for recalling past commands or re-executing them.",
    "date": "This command displays or sets the system date and time. For example, 'date +\"%Y-%m-%d\"' formats the output as 'Year-Month-Day.'",
    "ls": "This command lists the contents of the specified directory, showing files and folders. It provides various options like '-l' for detailed output and '-a' to include hidden files.",
    "module avail": "This command lists all available software modules in the system. It is often used in HPC environments to check for pre-installed libraries or tools that can be loaded with the 'module load' command.",
    "qstat -u $USER": "This command displays the status of jobs submitted to a PBS queue by the current user. It shows details like job ID, status, and queue, helping users monitor their job progress.",
    "pbsnodes -aFjson | jq -cr '.nodes | to_entries[].value | [{key: .Mom, value: {mem: .resources_available.mem, ncpus: .resources_available.ncpus, ngpus: .resources_available.ngpus, gpu_model: .resources_available.gpu_model, owner: [(.resources_available | to_entries[].value | select(.|type==\"string\") | select(.|test(\"^(normal|ib|gpu)-(?!all)[^,]+$\")) | split(\"-\") | last)] | unique, allowed: [(.resources_available | to_entries[] | select(.value|type==\"string\") | select(.value|test(\"^(normal|ib|gpu)-(?!all)[^,]+$\")) | .key | gsub(\"(ib|gpu)?\\\\d+$\"; \"\"))] | unique}}] | from_entries' | jq --argjson groups \"$(groups | tr ' ' '\\n' | sed 's/unsw/general/' | tr '[:upper:]' '[:lower:]' | jq -R . | jq -s)\" 'to_entries[] | select((.value.owner[] as $o | $groups | index($o)) or (.value.allowed[] as $a | $groups | index($a))) | select(.value.gpu_model != null) | {(.key): .value}'": "This command retrieves information about nodes in a PBS-based HPC cluster in JSON format, extracts details using jq, and filters nodes with specific GPU properties and ownership criteria. It ensures only nodes relevant to the user's groups and GPU requirements are included in the output."
}
